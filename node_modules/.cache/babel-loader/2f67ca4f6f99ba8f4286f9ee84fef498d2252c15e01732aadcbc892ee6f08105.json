{"ast":null,"code":"export function bubbleSort2(rects) {\n  const pairs = [];\n  const num = rects.length;\n  const prevRect = rects.slice();\n  for (let i = 0; i < num; i++) {\n    for (let j = i + 1; j < num; j++) {\n      if (prevRect[i].width > prevRect[j].width) {\n        const recti = {\n          ...prevRect[i]\n        };\n        const rectj = {\n          ...prevRect[j]\n        };\n        prevRect[j] = recti;\n        prevRect[i] = rectj;\n        pairs.push({\n          xx: i,\n          yy: j,\n          changed: true\n        });\n      } else {\n        pairs.push({\n          xx: i,\n          yy: j,\n          changed: false\n        });\n      }\n      if (j === num - 1) {\n        pairs.push({\n          xx: i,\n          yy: i,\n          changed: false\n        });\n      }\n    }\n  }\n  return pairs;\n}\nexport function selectionSort(arr) {\n  const pairs = [];\n  let n = arr.length;\n  const prevRect = arr.slice();\n  // One by one move boundary of unsorted subarray\n  for (let i = 0; i < n - 1; i++) {\n    let min_idx = i;\n    for (let j = i + 1; j < n; j++) {\n      pairs.push({\n        xx: min_idx,\n        yy: j,\n        changed: false\n      });\n      if (prevRect[j].width < prevRect[min_idx].width) {\n        min_idx = j;\n      }\n    }\n\n    // Swap the found minimum element with the first\n    // element\n    const recti = {\n      ...prevRect[i]\n    };\n    const rectj = {\n      ...prevRect[min_idx]\n    };\n    prevRect[min_idx] = recti;\n    prevRect[i] = rectj;\n    pairs.push({\n      xx: min_idx,\n      yy: i,\n      changed: true\n    });\n    pairs.push({\n      xx: i,\n      yy: i,\n      changed: false\n    });\n  }\n  pairs.push({\n    xx: n - 1,\n    yy: n - 1,\n    changed: false\n  });\n  return pairs;\n}\nexport function bubbleSort(arr) {\n  const pairs = [];\n  let n = arr.length;\n  const prevRect = arr.slice();\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      if (prevRect[j].width > prevRect[j + 1].width) {\n        // swap arr[j+1] and arr[j]\n        const recti = {\n          ...prevRect[j]\n        };\n        const rectj = {\n          ...prevRect[j + 1]\n        };\n        prevRect[j + 1] = recti;\n        prevRect[j] = rectj;\n        pairs.push({\n          xx: j,\n          yy: j + 1,\n          changed: true\n        });\n      } else {\n        pairs.push({\n          xx: j,\n          yy: j + 1,\n          changed: false\n        });\n      }\n      if (j === n - i - 2) {\n        pairs.push({\n          xx: n - i - 1,\n          yy: n - i - 1,\n          changed: false\n        });\n      }\n    }\n  }\n  pairs.push({\n    xx: 0,\n    yy: 0,\n    changed: false\n  });\n  return pairs;\n}\nexport function insertionSort(arr) {\n  const pairs = [];\n  let n = arr.length;\n  const prevRect = arr.slice();\n  for (let i = 1; i < n; ++i) {\n    let key = prevRect[i].width;\n    let j = i - 1;\n    while (j >= 0 && prevRect[j].width > key) {\n      const recti = {\n        ...prevRect[j]\n      };\n      const rectj = {\n        ...prevRect[j + 1]\n      };\n      prevRect[j + 1] = recti;\n      prevRect[j] = rectj;\n      pairs.push({\n        xx: j,\n        yy: j + 1,\n        changed: true\n      });\n      j = j - 1;\n    }\n    // arr[j + 1] = arr[i];\n  }\n\n  for (let i = 0; i < n; i++) {\n    pairs.push({\n      xx: i,\n      yy: i,\n      changed: true\n    });\n  }\n  return pairs;\n}","map":{"version":3,"names":["bubbleSort2","rects","pairs","num","length","prevRect","slice","i","j","width","recti","rectj","push","xx","yy","changed","selectionSort","arr","n","min_idx","bubbleSort","insertionSort","key"],"sources":["C:/Users/Admin/Desktop/visualizer1/AlgorithmVisualizer/src/algorithms/sortingAlgorithms.js"],"sourcesContent":["export function bubbleSort2(rects ){\r\n    const pairs = [];\r\n    const num  = rects.length;\r\n    const prevRect = rects.slice();\r\n\r\n    for( let i = 0; i<num; i++ ){\r\n        for( let j = i+1;j<num;j++ ){\r\n            if( prevRect[i].width>prevRect[j].width ){\r\n                const recti = {...prevRect[i]};\r\n                const rectj = {...prevRect[j]};\r\n                prevRect[j] = recti;\r\n                prevRect[i] = rectj;\r\n                pairs.push( {\r\n                    xx:i,\r\n                    yy:j,\r\n                    changed:true\r\n                } );\r\n            } else{\r\n                pairs.push( {\r\n                    xx:i,\r\n                    yy:j,\r\n                    changed:false\r\n                });\r\n            }\r\n            if( j === num-1 ){\r\n                pairs.push( {\r\n                    xx:i,\r\n                    yy:i,\r\n                    changed:false\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return pairs;\r\n}\r\n\r\nexport function selectionSort(arr) {\r\n    const pairs = [];\r\n    let n = arr.length;\r\n    const prevRect = arr.slice();\r\n    // One by one move boundary of unsorted subarray\r\n    for (let i = 0; i < n-1; i++)\r\n    {\r\n        let min_idx = i;\r\n        for (let j = i+1; j < n; j++){\r\n            pairs.push( {\r\n                xx:min_idx,\r\n                yy:j,\r\n                changed:false\r\n            } );\r\n            if (prevRect[j].width < prevRect[min_idx].width){\r\n                min_idx = j;\r\n            }\r\n        }\r\n\r\n        // Swap the found minimum element with the first\r\n        // element\r\n        const recti = {...prevRect[i]};\r\n        const rectj = {...prevRect[min_idx]};\r\n        prevRect[min_idx] = recti;\r\n        prevRect[i] = rectj;\r\n        pairs.push( {\r\n            xx:min_idx,\r\n            yy:i,\r\n            changed:true\r\n        } );\r\n        pairs.push( {\r\n            xx:i,\r\n            yy:i,\r\n            changed:false\r\n        });\r\n    }\r\n    pairs.push({\r\n            xx:n-1,\r\n            yy:n-1,\r\n            changed:false\r\n        }\r\n    )\r\n    return pairs;\r\n}\r\n\r\nexport function bubbleSort(arr){\r\n    const pairs= [];\r\n    let n = arr.length;\r\n    const prevRect = arr.slice();\r\n    for (let i = 0; i < n-1; i++){\r\n        for (let j = 0; j < n-i-1; j++){\r\n            if (prevRect[j].width > prevRect[j+1].width) {\r\n                // swap arr[j+1] and arr[j]\r\n                const recti = {...prevRect[j]};\r\n                const rectj = {...prevRect[j+1]};\r\n                prevRect[j+1] = recti;\r\n                prevRect[j] = rectj;\r\n                pairs.push( {\r\n                    xx:j,\r\n                    yy:j+1,\r\n                    changed:true\r\n                } );\r\n            } else{\r\n                pairs.push( {\r\n                    xx:j,\r\n                    yy:j+1,\r\n                    changed:false\r\n                } );\r\n            }\r\n            if( j === n-i-2 ){\r\n                pairs.push( {\r\n                    xx:n-i-1,\r\n                    yy:n-i-1,\r\n                    changed:false\r\n                } );\r\n            }\r\n        }\r\n    }\r\n    pairs.push({\r\n            xx:0,\r\n            yy:0,\r\n            changed:false\r\n        }\r\n    )\r\n    return pairs;\r\n}\r\n\r\nexport function insertionSort(arr){\r\n    const pairs = [];\r\n    let n = arr.length;\r\n    const prevRect = arr.slice();\r\n    for (let i = 1; i < n; ++i) {\r\n        let key = prevRect[i].width;\r\n        let j = i - 1;\r\n\r\n        while (j >= 0 && prevRect[j].width > key) {\r\n            const recti = {...prevRect[j]};\r\n            const rectj = {...prevRect[j+1]};\r\n            prevRect[j+1] = recti;\r\n            prevRect[j] = rectj;\r\n            pairs.push( {\r\n                xx:j,\r\n                yy:j+1,\r\n                changed:true\r\n            } );\r\n            j = j - 1;\r\n        }\r\n       // arr[j + 1] = arr[i];\r\n    }\r\n    for(let i=0;i<n;i++){\r\n        pairs.push({\r\n            xx:i,\r\n            yy:i,\r\n            changed:true\r\n        })\r\n    }\r\n    return pairs;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}