{"ast":null,"code":"import PriorityQueue from \"js-priority-queue\";\nfunction isInsideGrid(i, j, grid) {\n  return i >= 0 && i < grid.length && j >= 0 && j < grid[0].length;\n}\nvar dijkstra = function dijkstra(grid, startNode, endNode) {\n  var arr = grid;\n  var visited_nodes = [];\n  var shortestPath = [];\n  var start_node = startNode;\n  var end_node = endNode;\n  var pq = new PriorityQueue({\n    comparator: function comparator(a, b) {\n      return a.distance - b.distance;\n    }\n  });\n  for (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[0].length; j++) {\n      arr[i][j].distance = Infinity;\n      arr[i][j].prevNode = null;\n      arr[i][j].isVisited = false;\n      arr[i][j].isShortestPath = false;\n    }\n  }\n  arr[start_node[0]][start_node[1]].distance = 0;\n  pq.queue(arr[start_node[0]][start_node[1]]);\n  var dx = [1, 0, -1, 0];\n  var dy = [0, 1, 0, -1];\n  // console.log(set.toArray())\n  var limit = 0;\n  while (pq.length) {\n    var cell = pq.dequeue();\n    if (arr[cell.row][cell.col].isVisited) continue;\n    arr[cell.row][cell.col].isVisited = true;\n    visited_nodes.push(cell);\n    var flag = 0;\n    for (var _i = 0; _i < 4; _i++) {\n      var x = cell.row + dx[_i];\n      var y = cell.col + dy[_i];\n      if (!isInsideGrid(x, y, arr)) continue;\n      if (!arr[x][y].isVisited && (!arr[x][y].isWall || x == end_node[0] && y == end_node[1])) {\n        if (x === end_node[0] && y === end_node[1]) {\n          arr[x][y].isVisited = true;\n          arr[x][y].prevNode = arr[cell.row][cell.col];\n          var node = arr[x][y];\n          while (node !== null) {\n            shortestPath.unshift(node);\n            node = node.prevNode;\n            if (node) {\n              node.isShortestPath = true;\n              node.isVisited = false;\n            }\n          }\n          flag = 1;\n          break;\n        }\n        var dist = Math.abs(dx[_i]) === 1 && Math.abs(dy[_i]) === 1 ? 1.4 : 1;\n        if (cell.distance + dist < arr[x][y].distance) {\n          arr[x][y].prevNode = cell;\n          arr[x][y].distance = cell.distance + dist;\n        }\n        pq.queue(arr[x][y]);\n      }\n    }\n    if (flag == 1) break;\n  }\n  return {\n    visited_nodes: visited_nodes,\n    shortestPath: shortestPath\n  };\n};\nexport default dijkstra;","map":{"version":3,"names":["PriorityQueue","isInsideGrid","i","j","grid","length","dijkstra","startNode","endNode","arr","visited_nodes","shortestPath","start_node","end_node","pq","comparator","a","b","distance","Infinity","prevNode","isVisited","isShortestPath","queue","dx","dy","limit","cell","dequeue","row","col","push","flag","x","y","isWall","node","unshift","dist","Math","abs"],"sources":["C:/Users/Admin/Desktop/AlgorithmVisualizer-master/src/Pathfinding/algorithms/Dijkstra.js"],"sourcesContent":["import PriorityQueue from \"js-priority-queue\";\nfunction isInsideGrid(i,j,grid)\n    { \n        return (i >= 0 && i < grid.length && j >= 0 && j < grid[0].length); \n    } \nconst dijkstra = (grid, startNode, endNode) => {\n    \n        let arr=grid;\n        let visited_nodes=[];\n        let shortestPath=[];\n        let start_node=startNode;\n        let end_node=endNode;\n        let pq=new PriorityQueue({\n            comparator:function(a,b){\n                return a.distance-b.distance;\n            }\n        });\n        for(let i=0;i<arr.length;i++){\n            for(let j=0;j<arr[0].length;j++){\n                arr[i][j].distance=Infinity;\n                arr[i][j].prevNode=null;\n                arr[i][j].isVisited=false;\n                arr[i][j].isShortestPath=false;\n            }\n        }\n        arr[start_node[0]][start_node[1]].distance=0;\n        pq.queue(arr[start_node[0]][start_node[1]]);\n        let dx = [1, 0, -1, 0]; \n        let dy = [0, 1, 0, -1]; \n        // console.log(set.toArray())\n        let limit=0;\n        \n        while(pq.length){\n            let cell=pq.dequeue();\n            if(arr[cell.row][cell.col].isVisited)continue;\n            arr[cell.row][cell.col].isVisited=true;\n            visited_nodes.push(cell);\n            let flag=0;\n            for(let i=0;i<4;i++){\n                let x=cell.row+dx[i];\n                let y=cell.col+dy[i];\n                if(!isInsideGrid(x,y,arr))continue;\n                if(!arr[x][y].isVisited&&(!arr[x][y].isWall||(x==end_node[0]&&y==end_node[1]))){\n                    if(x===end_node[0]&&y===end_node[1]){\n                        arr[x][y].isVisited=true;\n                        arr[x][y].prevNode=arr[cell.row][cell.col];\n                        let node=arr[x][y];\n                        while (node !== null) {\n                            shortestPath.unshift(node);\n                            node = node.prevNode;\n                            if (node){ node.isShortestPath = true;\n                                node.isVisited=false;\n                            }\n                        }\n                        flag=1;\n                        break;\n                    }\n                    const dist = Math.abs(dx[i]) === 1 && Math.abs(dy[i]) === 1 ? 1.4 : 1;\n                    if (cell.distance + dist < arr[x][y].distance) {\n                        arr[x][y].prevNode = cell;\n                        arr[x][y].distance = cell.distance + dist;\n                    }\n                    pq.queue(arr[x][y]);\n                }\n                \n            }\n            if(flag==1)break;\n            \n            \n        }\n        return {visited_nodes,shortestPath};\n}\nexport default dijkstra;"],"mappings":"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"},"metadata":{},"sourceType":"module"}