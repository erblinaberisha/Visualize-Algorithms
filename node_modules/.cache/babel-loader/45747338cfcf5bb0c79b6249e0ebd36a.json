{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function aStar(grid, startNode, finishNode) {\n  var visitedNodesInOrder = [];\n  startNode.distance = 0;\n  var unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes, finishNode);\n    var closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n  unvisitedNodes.sort(function (nodeA, nodeB) {\n    return nodeA.distance + Math.abs(finishNode.row - nodeA.row) + Math.abs(finishNode.col - nodeA.col) - (nodeB.distance + Math.abs(finishNode.row - nodeB.row) + Math.abs(finishNode.col - nodeB.col));\n  });\n}\nfunction updateUnvisitedNeighbors(node, grid) {\n  var unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  var _iterator = _createForOfIteratorHelper(unvisitedNeighbors),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var neighbor = _step.value;\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nfunction getUnvisitedNeighbors(node, grid) {\n  var neighbors = [];\n  var col = node.col,\n    row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(function (neighbor) {\n    return !neighbor.isVisited;\n  });\n}\nfunction getAllNodes(grid) {\n  var nodes = [];\n  var _iterator2 = _createForOfIteratorHelper(grid),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var row = _step2.value;\n      var _iterator3 = _createForOfIteratorHelper(row),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var node = _step3.value;\n          nodes.push(node);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  var nodesInShortestPathOrder = [];\n  var currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["aStar","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","Math","abs","row","col","node","unvisitedNeighbors","getUnvisitedNeighbors","_iterator","_createForOfIteratorHelper","_step","s","n","done","neighbor","value","previousNode","err","e","f","neighbors","filter","nodes","_iterator2","_step2","_iterator3","_step3","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"sources":["C:/Users/Admin/Desktop/AlgorithmVisualizer-master/src/algorithms/Astar.js"],"sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function aStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes,finishNode);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes,finishNode) {\n  unvisitedNodes.sort((nodeA, nodeB) => (nodeA.distance+Math.abs(finishNode.row-nodeA.row)+Math.abs(finishNode.col-nodeA.col))\n                                        - (nodeB.distance+Math.abs(finishNode.row-nodeB.row)+Math.abs(finishNode.col-nodeB.col)));\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}