{"ast":null,"code":"// core keys merging algorithm. If previous render's keys are [a, b], and the\n// next render's [c, b, d], what's the final merged keys and ordering?\n\n// - c and a must both be before b\n// - b before d\n// - ordering between a and c ambiguous\n\n// this reduces to merging two partially ordered lists (e.g. lists where not\n// every item has a definite ordering, like comparing a and c above). For the\n// ambiguous ordering we deterministically choose to place the next render's\n// item after the previous'; so c after a\n\n// this is called a topological sorting. Except the existing algorithms don't\n// work well with js bc of the amount of allocation, and isn't optimized for our\n// current use-case bc the runtime is linear in terms of edges (see wiki for\n// meaning), which is huge when two lists have many common elements\n'use strict';\n\nexports.__esModule = true;\nexports['default'] = mergeDiff;\nfunction mergeDiff(prev, next, onRemove) {\n  // bookkeeping for easier access of a key's index below. This is 2 allocations +\n  // potentially triggering chrome hash map mode for objs (so it might be faster\n\n  var prevKeyIndex = {};\n  for (var i = 0; i < prev.length; i++) {\n    prevKeyIndex[prev[i].key] = i;\n  }\n  var nextKeyIndex = {};\n  for (var i = 0; i < next.length; i++) {\n    nextKeyIndex[next[i].key] = i;\n  }\n\n  // first, an overly elaborate way of merging prev and next, eliminating\n  // duplicates (in terms of keys). If there's dupe, keep the item in next).\n  // This way of writing it saves allocations\n  var ret = [];\n  for (var i = 0; i < next.length; i++) {\n    ret[i] = next[i];\n  }\n  for (var i = 0; i < prev.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i].key)) {\n      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't\n      // merge in keys that the user desires to kill\n      var fill = onRemove(i, prev[i]);\n      if (fill != null) {\n        ret.push(fill);\n      }\n    }\n  }\n\n  // now all the items all present. Core sorting logic to have the right order\n  return ret.sort(function (a, b) {\n    var nextOrderA = nextKeyIndex[a.key];\n    var nextOrderB = nextKeyIndex[b.key];\n    var prevOrderA = prevKeyIndex[a.key];\n    var prevOrderB = prevKeyIndex[b.key];\n    if (nextOrderA != null && nextOrderB != null) {\n      // both keys in next\n      return nextKeyIndex[a.key] - nextKeyIndex[b.key];\n    } else if (prevOrderA != null && prevOrderB != null) {\n      // both keys in prev\n      return prevKeyIndex[a.key] - prevKeyIndex[b.key];\n    } else if (nextOrderA != null) {\n      // key a in next, key b in prev\n\n      // how to determine the order between a and b? We find a \"pivot\" (term\n      // abuse), a key present in both prev and next, that is sandwiched between\n      // a and b. In the context of our above example, if we're comparing a and\n      // d, b's (the only) pivot\n      for (var i = 0; i < next.length; i++) {\n        var pivot = next[i].key;\n        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n          continue;\n        }\n        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {\n          return -1;\n        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {\n          return 1;\n        }\n      }\n      // pluggable. default to: next bigger than prev\n      return 1;\n    }\n    // prevOrderA, nextOrderB\n    for (var i = 0; i < next.length; i++) {\n      var pivot = next[i].key;\n      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n        continue;\n      }\n      if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {\n        return 1;\n      } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {\n        return -1;\n      }\n    }\n    // pluggable. default to: next bigger than prev\n    return -1;\n  });\n}\nmodule.exports = exports['default'];\n// to loop through and find a key's index each time), but I no longer care","map":{"version":3,"names":["exports","__esModule","mergeDiff","prev","next","onRemove","prevKeyIndex","i","length","key","nextKeyIndex","ret","Object","prototype","hasOwnProperty","call","fill","push","sort","a","b","nextOrderA","nextOrderB","prevOrderA","prevOrderB","pivot","module"],"sources":["C:/Users/Admin/Desktop/AlgorithmVisualizer-master/node_modules/react-motion/lib/mergeDiff.js"],"sourcesContent":["\n\n// core keys merging algorithm. If previous render's keys are [a, b], and the\n// next render's [c, b, d], what's the final merged keys and ordering?\n\n// - c and a must both be before b\n// - b before d\n// - ordering between a and c ambiguous\n\n// this reduces to merging two partially ordered lists (e.g. lists where not\n// every item has a definite ordering, like comparing a and c above). For the\n// ambiguous ordering we deterministically choose to place the next render's\n// item after the previous'; so c after a\n\n// this is called a topological sorting. Except the existing algorithms don't\n// work well with js bc of the amount of allocation, and isn't optimized for our\n// current use-case bc the runtime is linear in terms of edges (see wiki for\n// meaning), which is huge when two lists have many common elements\n'use strict';\n\nexports.__esModule = true;\nexports['default'] = mergeDiff;\n\nfunction mergeDiff(prev, next, onRemove) {\n  // bookkeeping for easier access of a key's index below. This is 2 allocations +\n  // potentially triggering chrome hash map mode for objs (so it might be faster\n\n  var prevKeyIndex = {};\n  for (var i = 0; i < prev.length; i++) {\n    prevKeyIndex[prev[i].key] = i;\n  }\n  var nextKeyIndex = {};\n  for (var i = 0; i < next.length; i++) {\n    nextKeyIndex[next[i].key] = i;\n  }\n\n  // first, an overly elaborate way of merging prev and next, eliminating\n  // duplicates (in terms of keys). If there's dupe, keep the item in next).\n  // This way of writing it saves allocations\n  var ret = [];\n  for (var i = 0; i < next.length; i++) {\n    ret[i] = next[i];\n  }\n  for (var i = 0; i < prev.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i].key)) {\n      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't\n      // merge in keys that the user desires to kill\n      var fill = onRemove(i, prev[i]);\n      if (fill != null) {\n        ret.push(fill);\n      }\n    }\n  }\n\n  // now all the items all present. Core sorting logic to have the right order\n  return ret.sort(function (a, b) {\n    var nextOrderA = nextKeyIndex[a.key];\n    var nextOrderB = nextKeyIndex[b.key];\n    var prevOrderA = prevKeyIndex[a.key];\n    var prevOrderB = prevKeyIndex[b.key];\n\n    if (nextOrderA != null && nextOrderB != null) {\n      // both keys in next\n      return nextKeyIndex[a.key] - nextKeyIndex[b.key];\n    } else if (prevOrderA != null && prevOrderB != null) {\n      // both keys in prev\n      return prevKeyIndex[a.key] - prevKeyIndex[b.key];\n    } else if (nextOrderA != null) {\n      // key a in next, key b in prev\n\n      // how to determine the order between a and b? We find a \"pivot\" (term\n      // abuse), a key present in both prev and next, that is sandwiched between\n      // a and b. In the context of our above example, if we're comparing a and\n      // d, b's (the only) pivot\n      for (var i = 0; i < next.length; i++) {\n        var pivot = next[i].key;\n        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n          continue;\n        }\n\n        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {\n          return -1;\n        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {\n          return 1;\n        }\n      }\n      // pluggable. default to: next bigger than prev\n      return 1;\n    }\n    // prevOrderA, nextOrderB\n    for (var i = 0; i < next.length; i++) {\n      var pivot = next[i].key;\n      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n        continue;\n      }\n      if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {\n        return 1;\n      } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {\n        return -1;\n      }\n    }\n    // pluggable. default to: next bigger than prev\n    return -1;\n  });\n}\n\nmodule.exports = exports['default'];\n// to loop through and find a key's index each time), but I no longer care"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}