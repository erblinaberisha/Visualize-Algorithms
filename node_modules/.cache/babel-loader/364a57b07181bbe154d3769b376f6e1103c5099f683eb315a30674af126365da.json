{"ast":null,"code":"let values = [];\nexport function quickSortRecursive(rects2) {\n  let rects = rects2.slice();\n  values = [];\n  let sz = rects2.length;\n  // console.log( \"fdsfsd\",sz );\n  sz = sz - 1;\n  quick(rects, 0, sz);\n  return values;\n}\nfunction getPartition(rects, left, right) {\n  values.push({\n    left,\n    right,\n    swap: false,\n    changedRange: true\n  });\n  let pivot = rects[right].width;\n  let it = left - 1;\n  for (var j = left; j <= right - 1; j++) {\n    if (rects[j].width < pivot) {\n      it++;\n      if (it !== j) {\n        // swap(rects[it],rects[j];\n        const rect1 = {\n          ...rects[it]\n        };\n        const rect2 = {\n          ...rects[j]\n        };\n        rects[it] = rect2;\n        rects[j] = rect1;\n        values.push({\n          left: it,\n          right: j,\n          swap: true,\n          changedRange: false\n        });\n      }\n    }\n  }\n  if (it + 1 !== right) {\n    const rect1 = {\n      ...rects[it + 1]\n    };\n    const rect2 = {\n      ...rects[right]\n    };\n    rects[it + 1] = rect2;\n    rects[right] = rect1;\n    values.push({\n      left: it + 1,\n      right: right,\n      swap: true,\n      changedRange: false\n    });\n  }\n  return it + 1;\n}\nfunction quick(rects, left, right) {\n  if (left >= right) return;\n  const partition = getPartition(rects, left, right);\n  quick(rects, left, partition - 1);\n  quick(rects, partition + 1, right);\n}","map":{"version":3,"names":["values","quickSortRecursive","rects2","rects","slice","sz","length","quick","getPartition","left","right","push","swap","changedRange","pivot","width","it","j","rect1","rect2","partition"],"sources":["C:/Users/Admin/Desktop/AlgorithmVisualizer-master/src/algorithms/quickSortRecursive.js"],"sourcesContent":["let values = [];\n\nexport function quickSortRecursive(rects2){\n    let rects = rects2.slice();\n    values = [];\n    let sz = rects2.length;\n    // console.log( \"fdsfsd\",sz );\n    sz = sz-1;\n    quick(rects,0,sz);\n    return values;\n}\n\n\nfunction getPartition(rects, left, right){\n    values.push({\n        left,\n        right,\n        swap:false,\n        changedRange:true,\n    })\n    let pivot = rects[right].width\n    let it = left-1;\n    for(var j=left;j<=right-1;j++){\n        if( rects[j].width< pivot){\n            it++;\n            if( it!==j ){\n                // swap(rects[it],rects[j];\n                const rect1 = {...rects[it]};\n                const rect2 = {...rects[j]};\n                rects[it] = rect2;\n                rects[j] = rect1;\n                values.push({\n                    left:it,\n                    right:j,\n                    swap:true,\n                    changedRange:false,\n                })\n            }\n        }\n    }\n    if( it+1!==right ){\n        const rect1 = {...rects[it+1]};\n        const rect2 = {...rects[right]};\n        rects[it+1] = rect2;\n        rects[right] = rect1;\n        values.push({\n            left:it+1,\n            right:right,\n            swap:true,\n            changedRange:false,\n        })\n    }\n    return it+1;\n}\nfunction quick(rects,left,right){\n    if( left>=right ) return ;\n    const partition = getPartition(rects,left,right);\n    quick(rects,left,partition-1);\n    quick(rects,partition+1,right);\n}"],"mappings":"AAAA,IAAIA,MAAM,GAAG,EAAE;AAEf,OAAO,SAASC,kBAAkBA,CAACC,MAAM,EAAC;EACtC,IAAIC,KAAK,GAAGD,MAAM,CAACE,KAAK,CAAC,CAAC;EAC1BJ,MAAM,GAAG,EAAE;EACX,IAAIK,EAAE,GAAGH,MAAM,CAACI,MAAM;EACtB;EACAD,EAAE,GAAGA,EAAE,GAAC,CAAC;EACTE,KAAK,CAACJ,KAAK,EAAC,CAAC,EAACE,EAAE,CAAC;EACjB,OAAOL,MAAM;AACjB;AAGA,SAASQ,YAAYA,CAACL,KAAK,EAAEM,IAAI,EAAEC,KAAK,EAAC;EACrCV,MAAM,CAACW,IAAI,CAAC;IACRF,IAAI;IACJC,KAAK;IACLE,IAAI,EAAC,KAAK;IACVC,YAAY,EAAC;EACjB,CAAC,CAAC;EACF,IAAIC,KAAK,GAAGX,KAAK,CAACO,KAAK,CAAC,CAACK,KAAK;EAC9B,IAAIC,EAAE,GAAGP,IAAI,GAAC,CAAC;EACf,KAAI,IAAIQ,CAAC,GAACR,IAAI,EAACQ,CAAC,IAAEP,KAAK,GAAC,CAAC,EAACO,CAAC,EAAE,EAAC;IAC1B,IAAId,KAAK,CAACc,CAAC,CAAC,CAACF,KAAK,GAAED,KAAK,EAAC;MACtBE,EAAE,EAAE;MACJ,IAAIA,EAAE,KAAGC,CAAC,EAAE;QACR;QACA,MAAMC,KAAK,GAAG;UAAC,GAAGf,KAAK,CAACa,EAAE;QAAC,CAAC;QAC5B,MAAMG,KAAK,GAAG;UAAC,GAAGhB,KAAK,CAACc,CAAC;QAAC,CAAC;QAC3Bd,KAAK,CAACa,EAAE,CAAC,GAAGG,KAAK;QACjBhB,KAAK,CAACc,CAAC,CAAC,GAAGC,KAAK;QAChBlB,MAAM,CAACW,IAAI,CAAC;UACRF,IAAI,EAACO,EAAE;UACPN,KAAK,EAACO,CAAC;UACPL,IAAI,EAAC,IAAI;UACTC,YAAY,EAAC;QACjB,CAAC,CAAC;MACN;IACJ;EACJ;EACA,IAAIG,EAAE,GAAC,CAAC,KAAGN,KAAK,EAAE;IACd,MAAMQ,KAAK,GAAG;MAAC,GAAGf,KAAK,CAACa,EAAE,GAAC,CAAC;IAAC,CAAC;IAC9B,MAAMG,KAAK,GAAG;MAAC,GAAGhB,KAAK,CAACO,KAAK;IAAC,CAAC;IAC/BP,KAAK,CAACa,EAAE,GAAC,CAAC,CAAC,GAAGG,KAAK;IACnBhB,KAAK,CAACO,KAAK,CAAC,GAAGQ,KAAK;IACpBlB,MAAM,CAACW,IAAI,CAAC;MACRF,IAAI,EAACO,EAAE,GAAC,CAAC;MACTN,KAAK,EAACA,KAAK;MACXE,IAAI,EAAC,IAAI;MACTC,YAAY,EAAC;IACjB,CAAC,CAAC;EACN;EACA,OAAOG,EAAE,GAAC,CAAC;AACf;AACA,SAAST,KAAKA,CAACJ,KAAK,EAACM,IAAI,EAACC,KAAK,EAAC;EAC5B,IAAID,IAAI,IAAEC,KAAK,EAAG;EAClB,MAAMU,SAAS,GAAGZ,YAAY,CAACL,KAAK,EAACM,IAAI,EAACC,KAAK,CAAC;EAChDH,KAAK,CAACJ,KAAK,EAACM,IAAI,EAACW,SAAS,GAAC,CAAC,CAAC;EAC7Bb,KAAK,CAACJ,KAAK,EAACiB,SAAS,GAAC,CAAC,EAACV,KAAK,CAAC;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}