{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function aStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes, finishNode);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance + Math.abs(finishNode.row - nodeA.row) + Math.abs(finishNode.col - nodeA.col) - (nodeB.distance + Math.abs(finishNode.row - nodeB.row) + Math.abs(finishNode.col - nodeB.col)));\n}\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["aStar","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","Math","abs","row","col","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"sources":["C:/Users/Admin/Desktop/visualizer1/AlgorithmVisualizer/src/algorithms/Astar.js"],"sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function aStar(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes,finishNode);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes,finishNode) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => (nodeA.distance+Math.abs(finishNode.row-nodeA.row)+Math.abs(finishNode.col-nodeA.col))\r\n                                        - (nodeB.distance+Math.abs(finishNode.row-nodeB.row)+Math.abs(finishNode.col-nodeB.col)));\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,KAAKA,CAACC,IAAI,EAAEC,SAAS,EAAEC,UAAU,EAAE;EACjD,MAAMC,mBAAmB,GAAG,EAAE;EAC9BF,SAAS,CAACG,QAAQ,GAAG,CAAC;EACtB,MAAMC,cAAc,GAAGC,WAAW,CAACN,IAAI,CAAC;EACxC,OAAO,CAAC,CAACK,cAAc,CAACE,MAAM,EAAE;IAC9BC,mBAAmB,CAACH,cAAc,EAACH,UAAU,CAAC;IAC9C,MAAMO,WAAW,GAAGJ,cAAc,CAACK,KAAK,CAAC,CAAC;IAC1C;IACA,IAAID,WAAW,CAACE,MAAM,EAAE;IACxB;IACA;IACA,IAAIF,WAAW,CAACL,QAAQ,KAAKQ,QAAQ,EAAE,OAAOT,mBAAmB;IACjEM,WAAW,CAACI,SAAS,GAAG,IAAI;IAC5BV,mBAAmB,CAACW,IAAI,CAACL,WAAW,CAAC;IACrC,IAAIA,WAAW,KAAKP,UAAU,EAAE,OAAOC,mBAAmB;IAC1DY,wBAAwB,CAACN,WAAW,EAAET,IAAI,CAAC;EAC7C;AACF;AAEA,SAASQ,mBAAmBA,CAACH,cAAc,EAACH,UAAU,EAAE;EACtDG,cAAc,CAACW,IAAI,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAMD,KAAK,CAACb,QAAQ,GAACe,IAAI,CAACC,GAAG,CAAClB,UAAU,CAACmB,GAAG,GAACJ,KAAK,CAACI,GAAG,CAAC,GAACF,IAAI,CAACC,GAAG,CAAClB,UAAU,CAACoB,GAAG,GAACL,KAAK,CAACK,GAAG,CAAC,IAClFJ,KAAK,CAACd,QAAQ,GAACe,IAAI,CAACC,GAAG,CAAClB,UAAU,CAACmB,GAAG,GAACH,KAAK,CAACG,GAAG,CAAC,GAACF,IAAI,CAACC,GAAG,CAAClB,UAAU,CAACoB,GAAG,GAACJ,KAAK,CAACI,GAAG,CAAC,CAAC,CAAC;AACjI;AAEA,SAASP,wBAAwBA,CAACQ,IAAI,EAAEvB,IAAI,EAAE;EAC5C,MAAMwB,kBAAkB,GAAGC,qBAAqB,CAACF,IAAI,EAAEvB,IAAI,CAAC;EAC5D,KAAK,MAAM0B,QAAQ,IAAIF,kBAAkB,EAAE;IACzCE,QAAQ,CAACtB,QAAQ,GAAGmB,IAAI,CAACnB,QAAQ,GAAG,CAAC;IACrCsB,QAAQ,CAACC,YAAY,GAAGJ,IAAI;EAC9B;AACF;AAEA,SAASE,qBAAqBA,CAACF,IAAI,EAAEvB,IAAI,EAAE;EACzC,MAAM4B,SAAS,GAAG,EAAE;EACpB,MAAM;IAACN,GAAG;IAAED;EAAG,CAAC,GAAGE,IAAI;EACvB,IAAIF,GAAG,GAAG,CAAC,EAAEO,SAAS,CAACd,IAAI,CAACd,IAAI,CAACqB,GAAG,GAAG,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC;EAC/C,IAAID,GAAG,GAAGrB,IAAI,CAACO,MAAM,GAAG,CAAC,EAAEqB,SAAS,CAACd,IAAI,CAACd,IAAI,CAACqB,GAAG,GAAG,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC;EAC7D,IAAIA,GAAG,GAAG,CAAC,EAAEM,SAAS,CAACd,IAAI,CAACd,IAAI,CAACqB,GAAG,CAAC,CAACC,GAAG,GAAG,CAAC,CAAC,CAAC;EAC/C,IAAIA,GAAG,GAAGtB,IAAI,CAAC,CAAC,CAAC,CAACO,MAAM,GAAG,CAAC,EAAEqB,SAAS,CAACd,IAAI,CAACd,IAAI,CAACqB,GAAG,CAAC,CAACC,GAAG,GAAG,CAAC,CAAC,CAAC;EAChE,OAAOM,SAAS,CAACC,MAAM,CAACH,QAAQ,IAAI,CAACA,QAAQ,CAACb,SAAS,CAAC;AAC1D;AAEA,SAASP,WAAWA,CAACN,IAAI,EAAE;EACzB,MAAM8B,KAAK,GAAG,EAAE;EAChB,KAAK,MAAMT,GAAG,IAAIrB,IAAI,EAAE;IACtB,KAAK,MAAMuB,IAAI,IAAIF,GAAG,EAAE;MACtBS,KAAK,CAAChB,IAAI,CAACS,IAAI,CAAC;IAClB;EACF;EACA,OAAOO,KAAK;AACd;;AAEA;AACA;AACA,OAAO,SAASC,2BAA2BA,CAAC7B,UAAU,EAAE;EACtD,MAAM8B,wBAAwB,GAAG,EAAE;EACnC,IAAIC,WAAW,GAAG/B,UAAU;EAC5B,OAAO+B,WAAW,KAAK,IAAI,EAAE;IAC3BD,wBAAwB,CAACE,OAAO,CAACD,WAAW,CAAC;IAC7CA,WAAW,GAAGA,WAAW,CAACN,YAAY;EACxC;EACA,OAAOK,wBAAwB;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}