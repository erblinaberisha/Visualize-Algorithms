{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"sources":["C:/Users/Admin/Desktop/AlgorithmVisualizer-master/src/algorithms/dijkstra.js"],"sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}