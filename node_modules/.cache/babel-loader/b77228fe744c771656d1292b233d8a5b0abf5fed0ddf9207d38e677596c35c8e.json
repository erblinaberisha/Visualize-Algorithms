{"ast":null,"code":"export function bfsdfs(grid, startNode, endNode, algo) {\n  var list = [];\n  const nodesInOrder = [];\n  nodesInOrder.push(startNode);\n  list.push(startNode);\n  startNode.isVisited = true;\n  while (!!list.length) {\n    const currentNode = algo === \"bfs\" ? list.shift() : list.pop();\n    nodesInOrder.push(currentNode);\n    if (currentNode === endNode) return nodesInOrder;\n    if (algo === \"dfs\") currentNode.isVisited = true;\n    const nodesToPush = getNeighbours(grid, currentNode);\n    for (const node of nodesToPush) {\n      if (algo === \"bfs\") {\n        node.isVisited = true;\n      }\n      node.previousNode = currentNode;\n      list.push(node);\n    }\n  }\n  return nodesInOrder;\n}\nfunction getNeighbours(grid, node) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  // console.log(node);\n\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited && !neighbor.isWall);\n}","map":{"version":3,"names":["bfsdfs","grid","startNode","endNode","algo","list","nodesInOrder","push","isVisited","length","currentNode","shift","pop","nodesToPush","getNeighbours","node","previousNode","neighbors","col","row","filter","neighbor","isWall"],"sources":["C:/Users/Admin/Desktop/visualizer1/AlgorithmVisualizer/src/algorithms/bfs.jsx"],"sourcesContent":["export function bfsdfs(grid,startNode,endNode,algo){\r\n    var list = [];\r\n    const nodesInOrder = [];\r\n    nodesInOrder.push(startNode);\r\n    list.push(startNode);\r\n    startNode.isVisited = true;\r\n    while(!!list.length){\r\n        const currentNode = (algo === \"bfs\" ? list.shift():list.pop());\r\n        nodesInOrder.push(currentNode);\r\n        if( currentNode === endNode ) return nodesInOrder;\r\n        if( algo === \"dfs\" ) currentNode.isVisited = true;\r\n        const nodesToPush = getNeighbours(grid,currentNode);\r\n        for( const node of nodesToPush ){\r\n            if(algo === \"bfs\"){\r\n                node.isVisited = true;\r\n            }\r\n            node.previousNode = currentNode;\r\n            list.push(node);\r\n\r\n        }\r\n    }\r\n    return nodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(grid,node){\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n   // console.log(node);\r\n\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => (!neighbor.isVisited && !neighbor.isWall ));\r\n}"],"mappings":"AAAA,OAAO,SAASA,MAAMA,CAACC,IAAI,EAACC,SAAS,EAACC,OAAO,EAACC,IAAI,EAAC;EAC/C,IAAIC,IAAI,GAAG,EAAE;EACb,MAAMC,YAAY,GAAG,EAAE;EACvBA,YAAY,CAACC,IAAI,CAACL,SAAS,CAAC;EAC5BG,IAAI,CAACE,IAAI,CAACL,SAAS,CAAC;EACpBA,SAAS,CAACM,SAAS,GAAG,IAAI;EAC1B,OAAM,CAAC,CAACH,IAAI,CAACI,MAAM,EAAC;IAChB,MAAMC,WAAW,GAAIN,IAAI,KAAK,KAAK,GAAGC,IAAI,CAACM,KAAK,CAAC,CAAC,GAACN,IAAI,CAACO,GAAG,CAAC,CAAE;IAC9DN,YAAY,CAACC,IAAI,CAACG,WAAW,CAAC;IAC9B,IAAIA,WAAW,KAAKP,OAAO,EAAG,OAAOG,YAAY;IACjD,IAAIF,IAAI,KAAK,KAAK,EAAGM,WAAW,CAACF,SAAS,GAAG,IAAI;IACjD,MAAMK,WAAW,GAAGC,aAAa,CAACb,IAAI,EAACS,WAAW,CAAC;IACnD,KAAK,MAAMK,IAAI,IAAIF,WAAW,EAAE;MAC5B,IAAGT,IAAI,KAAK,KAAK,EAAC;QACdW,IAAI,CAACP,SAAS,GAAG,IAAI;MACzB;MACAO,IAAI,CAACC,YAAY,GAAGN,WAAW;MAC/BL,IAAI,CAACE,IAAI,CAACQ,IAAI,CAAC;IAEnB;EACJ;EACA,OAAOT,YAAY;AACvB;AAEA,SAASQ,aAAaA,CAACb,IAAI,EAACc,IAAI,EAAC;EAC7B,MAAME,SAAS,GAAG,EAAE;EACpB,MAAM;IAACC,GAAG;IAAEC;EAAG,CAAC,GAAGJ,IAAI;EACxB;;EAEC,IAAIG,GAAG,GAAG,CAAC,EAAED,SAAS,CAACV,IAAI,CAACN,IAAI,CAACkB,GAAG,CAAC,CAACD,GAAG,GAAG,CAAC,CAAC,CAAC;EAC/C,IAAIC,GAAG,GAAG,CAAC,EAAEF,SAAS,CAACV,IAAI,CAACN,IAAI,CAACkB,GAAG,GAAG,CAAC,CAAC,CAACD,GAAG,CAAC,CAAC;EAC/C,IAAIC,GAAG,GAAGlB,IAAI,CAACQ,MAAM,GAAG,CAAC,EAAEQ,SAAS,CAACV,IAAI,CAACN,IAAI,CAACkB,GAAG,GAAG,CAAC,CAAC,CAACD,GAAG,CAAC,CAAC;EAC7D,IAAIA,GAAG,GAAGjB,IAAI,CAAC,CAAC,CAAC,CAACQ,MAAM,GAAG,CAAC,EAAEQ,SAAS,CAACV,IAAI,CAACN,IAAI,CAACkB,GAAG,CAAC,CAACD,GAAG,GAAG,CAAC,CAAC,CAAC;EAChE,OAAOD,SAAS,CAACG,MAAM,CAACC,QAAQ,IAAK,CAACA,QAAQ,CAACb,SAAS,IAAI,CAACa,QAAQ,CAACC,MAAQ,CAAC;AACnF"},"metadata":{},"sourceType":"module","externalDependencies":[]}